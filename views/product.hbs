<section class="container mx-auto flex-grow max-w-[1200px] border-b py-5 lg:flex lg:flex-row lg:py-10">
    <!-- Filter toggle button -->
    <div class="lg:hidden flex justify-between items-center px-4 py-3 border-b">
        <button id="toggle-filters" class="flex items-center gap-2 text-violet-900 font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 5.25h16.5m-16.5 6h16.5m-16.5 6h16.5" />
            </svg>
            Filters
        </button>
    </div>

    <!-- Sidebar -->
    <section id="filters-sidebar"
        class="hidden fixed inset-0 z-20 bg-white p-4 lg:static lg:block lg:w-[300px] lg:flex-shrink-0">
        <div class="flex justify-between items-center mb-4 lg:hidden">
            <p class="font-medium text-lg">Filters</p>
            <button id="close-filters" class="text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div id="filter-container"></div>
    </section>

    <div>
        <!-- Sort by Button -->
        <button id="sort-button" class="flex items-center justify-center border px-6 py-2">
            Sort by
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="mx-2 h-4 w-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
            </svg>
        </button>

        <!-- Sort options dropdown -->
        <div id="sort-options" class="hidden absolute bg-white shadow-lg rounded-lg mt-1 w-48 border">
            <div class="px-4 py-2 cursor-pointer" data-sort="default">Default</div>
            <div class="px-4 py-2 cursor-pointer" data-sort="price-asc">Price: Low to High</div>
            <div class="px-4 py-2 cursor-pointer" data-sort="price-desc">Price: High to Low</div>
            <div class="px-4 py-2 cursor-pointer" data-sort="name-asc">Name: A to Z</div>
            <div class="px-4 py-2 cursor-pointer" data-sort="name-desc">Name: Z to A</div>
        </div>
        <!-- /Sort by Button -->
        <div class="lg:flex-grow lg:border-l lg:pl-5">
            <section class="product-list mx-auto grid max-w-[1200px] grid-cols-2 gap-3 px-5 pb-10 lg:grid-cols-3">
                <!-- Products -->
                {{#each products}}
                <div class="flex flex-col">
                    <div class="relative flex">
                        <img class="" src="{{this.imageUrl}}" alt="{{this.name}}" />
                        <div
                            class="absolute flex h-full w-full items-center justify-center gap-3 opacity-0 duration-150 hover:opacity-100">
                            <a href="/detail/{{formatName this.name}}"
                                class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="h-4 w-4">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                                </svg>
                            </a>
                            <span
                                class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                                    class="h-4 w-4">
                                    <path
                                        d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
                                </svg>
                            </span>
                        </div>

                        {{#if this.promotion}}
                        <div class="absolute right-1 mt-3 flex items-center justify-center bg-amber-400">
                            <p class="px-2 py-2 text-sm">&minus; {{this.promotion}}&percnt; OFF</p>
                        </div>
                        {{/if}}
                    </div>

                    <div>
                        <p class="mt-2">{{this.name}}</p>
                        {{#if this.discountedPrice}}
                        <p class="font-medium text-violet-900">
                            {{formatPrice this.discountedPrice}} VND
                            <span class="text-sm text-gray-500 line-through">{{formatPrice this.price}} VND</span>
                        </p>
                        {{else}}
                        <p class="font-medium text-violet-900">
                            {{formatPrice this.price}} VND
                        </p>
                        {{/if}}
                    </div>

                    <div class="flex items-center">
                        {{#each (range 1 5)}}
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                            class="h-4 w-4 {{#if (lte this 4)}}text-yellow-400{{else}}text-gray-200{{/if}}">
                            <path fill-rule="evenodd"
                                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                                clip-rule="evenodd" />
                        </svg>
                        {{/each}}
                        <p class="text-sm text-gray-400">(150)</p>
                    </div>


                    <div>
                        <button class="my-5 h-10 w-full bg-violet-900 text-white add-to-cart-btn"
                            data-product-id={{this.id}}>
                            Add to cart
                        </button>
                    </div>
                </div>
                {{/each}}
                <!-- /Products -->
            </section>

            <!-- Pagination Search-->
            <nav class="flex justify-center bg-center" id="pagination-search">
                <ul class="inline-flex -space-x-px text-sm">
                    <li>
                        <a href="#" data-page="previous"
                            class="pagination-link flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                            Previous</a>
                    </li>

                    <li>
                        <a href="#" data-page="next"
                            class="pagination-link flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                            Next</a>
                    </li>
                </ul>
            </nav>

            <!-- Pagination Filter -->
            <div id="pagination-container" class="flex justify-center mt-10">
                <!-- Pagination buttons will be dynamically generated here -->
            </div>
            <!-- /Pagination -->
        </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const paginationSearch = document.getElementById("pagination-search");
        const paginationLinks = document.querySelectorAll(".pagination-link");

        paginationLinks.forEach(link => {
            link.addEventListener("click", function (event) {
                event.preventDefault();

                let currentPage = getCurrentPage();
                let newPage = this.dataset.page === "next" ? currentPage + 1 : currentPage - 1;

                if (newPage < 1) newPage = 1;

                // Cập nhật URL
                const newUrl = updateUrlWithPage(newPage);
                window.history.pushState({ page: newPage }, "", newUrl);

                // Gửi request AJAX để tải dữ liệu trang mới
                fetchData(newPage);
            });
        });

        // Hàm lấy số trang hiện tại từ URL
        function getCurrentPage() {
            const urlParams = new URLSearchParams(window.location.search);
            let page = parseInt(urlParams.get('page')) || 1;
            return page;
        }

        // Hàm tạo lại URL với tham số page mới
        function updateUrlWithPage(page) {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('page', page); // Cập nhật tham số page
            return `${window.location.pathname}?${urlParams.toString()}`;
        }

        function apiToFetchData(page) {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('page', page); // Cập nhật tham số page
            return `/api${window.location.pathname}?${urlParams.toString()}`;
        }

        // Hàm gửi request AJAX và cập nhật nội dung trang
        function fetchData(page) {
            const url = apiToFetchData(page);
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    updateProductList(data.products);
                })
                .catch(error => {
                    console.error("Error fetching data:", error);
                });
        }

        // Initialize filter sidebar visibility toggle
        const filterSidebar = document.getElementById("filters-sidebar");
        const toggleFilters = document.getElementById("toggle-filters");
        const closeFilters = document.getElementById("close-filters");

        // Hiển thị bộ lọc
        toggleFilters?.addEventListener("click", () => {
            filterSidebar.classList.remove("hidden");
            filterSidebar.classList.add("block");
        });

        // Ẩn bộ lọc
        closeFilters?.addEventListener("click", () => {
            filterSidebar.classList.remove("block");
            filterSidebar.classList.add("hidden");
        });

        // Đóng bộ lọc khi nhấp ra ngoài
        document.addEventListener("click", (event) => {
            if (!filterSidebar.contains(event.target) && !toggleFilters.contains(event.target)) {
                filterSidebar.classList.remove("block");
                filterSidebar.classList.add("hidden");
            }
        });

        // Initialize sort options dropdown visibility toggle
        const sortButton = document.getElementById("sort-button");
        const sortOptions = document.getElementById("sort-options");

        sortButton.addEventListener("click", () => {
            sortOptions.classList.toggle("hidden");
            sortOptions.style.zIndex = 10; // Ensure the sort options dropdown is above other elements
        });

        // Handle sort option selection
        document.querySelectorAll("#sort-options div").forEach(option => {
            option.addEventListener("click", (event) => {
                const sortOrder = event.target.getAttribute("data-sort");
                sortButton.textContent = `Sort by: ${event.target.textContent}`; // Display selected sort option
                applyFilters(1, sortOrder); // Apply filters with selected sorting option
                sortOptions.classList.add("hidden"); // Hide sort options after selection
            });
        });

        // Initialize menu data
        const menuData = {
            "Price": ["0-5.000.000", "5.000.000-10.000.000", "10.000.000-20.000.000", "20.000.000-50.000.000", "50.000.000+"],
            "Brand": ["Apple", "Samsung", "Oppo", "Xiaomi", "Nubia"],
            "Chipset": ["Snapdragon", "MediaTek Dimensity", "Apple", "Unisoc"],
            "OS": ["Android", "iOS", "Xiaomi HyperOS", "ColorOS", "One UI"],
            "RAM": ["4GB", "6GB", "8GB", "12GB", "16GB"],
            "Storage": ["64GB", "128GB", "256GB", "512GB", "1024GB"],
            "Refresh rate": ["60Hz", "90Hz", "120Hz", "144Hz"],
        };

        // Function to generate filter options
        const generateFilterOptions = () => {
            const filterContainer = document.getElementById("filter-container");
            if (!filterContainer) {
                console.error("Filter container element not found.");
                return;
            }

            // Clear existing content
            filterContainer.innerHTML = "";

            // Thêm lớp Tailwind để tạo dạng grid, mặc định 2 cột, sẽ chuyển thành 1 cột trên màn hình nhỏ hơn lg
            filterContainer.classList.add(
                'grid',
                'grid-cols-2',
                'gap-4',
                'lg:grid-cols-1',
                'overflow-y-auto', // Bật cuộn khi màn hình nhỏ
                'max-h-[calc(100vh-100px)]' // Chiều cao tối đa cho màn hình nhỏ
            );

            // Generate filter options based on menuData
            Object.keys(menuData).forEach(category => {
                const categoryDiv = document.createElement("div");
                categoryDiv.classList.add("mb-4");

                const categoryTitle = document.createElement("p");
                categoryTitle.classList.add("font-medium", "mb-2");
                categoryTitle.textContent = category;
                categoryDiv.appendChild(categoryTitle);

                menuData[category].forEach(item => {
                    const checkbox = `
            <div class="flex justify-between items-center mb-1">
                <label class="flex items-center">
                    <input type="checkbox" name="${category}" value="${item}" class="mr-2" />
                    ${item}
                </label>
            </div>`;
                    categoryDiv.insertAdjacentHTML("beforeend", checkbox);
                });

                filterContainer.appendChild(categoryDiv);
            });

            // Bind events for new checkboxes
            document.querySelectorAll("#filter-container input[type='checkbox']").forEach((checkbox) => {
                checkbox.addEventListener("change", (event) => {
                    applyFilters(1); // Gọi applyFilters khi checkbox thay đổi
                });
            });
        };

        const applyFilters = async (page = 1, sortOrder = "") => {
            const selectedFilters = {};

            document.querySelectorAll("#filter-container input[type='checkbox']:checked").forEach((checkbox) => {
                const category = checkbox.name.toLowerCase(); // lấy tên bộ lọc (vd: Brand, RAM)
                const value = checkbox.value;  // lấy giá trị được chọn

                // Tạo array cho mỗi category nếu chưa có
                if (!selectedFilters[category]) {
                    selectedFilters[category] = [];
                }

                // Thêm giá trị đã chọn vào array
                selectedFilters[category].push(value);
            });

            const query = Object.keys(selectedFilters)
                .map((key) => selectedFilters[key].map((value) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&"))
                .join("&");

            try {
                const response = await fetch(`/product/filter?page=${page}&${query}&sort=${sortOrder}`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                if (!response.ok) {
                    console.error("Error fetching data:", response.statusText);
                    return;
                }

                const data = await response.json();

                if (data.success) {
                    updateProductList(data.products); // Cập nhật UI với danh sách sản phẩm lọc được
                    changeUrlWithFilters(selectedFilters, page, sortOrder); // Cập nhật URL với bộ lọc đã chọn
                    updatePagination(data.totalPages, page); // Cập nhật pagination
                    paginationSearch.style.display = "none";
                } else {
                    console.error("Error fetching products:", data.message);
                }
            } catch (error) {
                console.error("Error fetching filtered products:", error);
            }
        };

        const changeUrlWithFilters = (filters, page, sortOrder) => {
            // Build the query string from filters
            const query = Object.keys(filters)
                .map((key) => filters[key].map((value) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&"))
                .join("&");

            // Initialize the new URL with the page and filter parameters
            let newUrl = `${window.location.pathname}?page=${page}&${query}`;

            // Add the sort parameter only if it's not "Default"
            if (sortOrder && sortOrder !== "Default") {
                newUrl += `&sort=${encodeURIComponent(sortOrder)}`;
            }

            // Update the browser URL without reloading the page
            window.history.pushState({ path: newUrl }, '', newUrl);
        };

        // Cập nhật pagination
        const updatePagination = (totalPages, currentPage) => {
            const paginationContainer = document.getElementById("pagination-container");
            if (!paginationContainer) {
                console.error("Pagination container not found.");
                return;
            }

            paginationContainer.innerHTML = "";

            // Create and add 'Previous' button
            const prevButton = document.createElement("button");
            prevButton.textContent = "Previous";
            prevButton.classList.add("px-3", "py-1", "border", "mx-1", "rounded");
            if (currentPage === 1) {
                prevButton.disabled = true;
                prevButton.classList.add("bg-gray-300", "text-gray-500");
            } else {
                prevButton.classList.add("bg-white", "text-violet-900");
                prevButton.addEventListener("click", (event) => {
                    event.preventDefault();
                    applyFilters(currentPage - 1); // Go to previous page
                });
            }
            paginationContainer.appendChild(prevButton);

            // Create page number buttons
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement("button");
                pageButton.textContent = i;
                pageButton.classList.add("px-3", "py-1", "border", "mx-1", "rounded");
                if (i === currentPage) {
                    pageButton.classList.add("bg-violet-900", "text-white");
                } else {
                    pageButton.classList.add("bg-white", "text-violet-900");
                    pageButton.addEventListener("click", (event) => {
                        event.preventDefault();
                        applyFilters(i); // Go to the selected page
                    });
                }
                paginationContainer.appendChild(pageButton);
            }

            // Create and add 'Next' button
            const nextButton = document.createElement("button");
            nextButton.textContent = "Next";
            nextButton.classList.add("px-3", "py-1", "border", "mx-1", "rounded");
            if (currentPage === totalPages) {
                nextButton.disabled = true;
                nextButton.classList.add("bg-gray-300", "text-gray-500");
            } else {
                nextButton.classList.add("bg-white", "text-violet-900");
                nextButton.addEventListener("click", (event) => {
                    event.preventDefault();
                    applyFilters(currentPage + 1); // Go to next page
                });
            }
            paginationContainer.appendChild(nextButton);
        };

        const updateProductList = (products) => {
            const productContainer = document.querySelector("section.grid"); // Chọn container hiển thị sản phẩm
            if (!productContainer) {
                console.error("Product container not found.");
                return;
            }

            // Xóa sản phẩm cũ
            productContainer.innerHTML = "";

            // Thêm sản phẩm mới
            products.forEach((product) => {
                const productHTML = `
                    <div class="flex flex-col">
                        <div class="relative flex">
                            <img src="${product.imageUrl}" alt="${product.name}" />
                            <div class="absolute flex h-full w-full items-center justify-center gap-3 opacity-0 duration-150 hover:opacity-100">
                                <a href="/detail/${product.lowercaseName}"
                                    class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                        stroke="currentColor" class="h-4 w-4">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                                    </svg>
                                </a>
                                <span class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                                        class="h-4 w-4">
                                        <path
                                            d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
                                    </svg>
                                </span>
                            </div>
                            ${product.promotion ? `<div class="absolute right-1 mt-3 flex items-center justify-center bg-amber-400"><p class="px-2 py-2 text-sm">&minus; ${product.promotion}% OFF</p></div>` : ''}
                        </div>
                        
                        <div>
                            <p class="mt-2">${product.name}</p>
                            ${product.discountedPrice
                        ? `<p class="font-medium text-violet-900">${product.discountedPrice.toLocaleString('vi-VN')} VND <span class="text-sm text-gray-500 line-through">${product.price.toLocaleString('vi-VN')} VND</span></p>`
                        : `<p class="font-medium text-violet-900">${product.price.toLocaleString('vi-VN')} VND</p>`}
                        </div>
                        
                        <div class="flex items-center">
                            {{#each (range 1 5)}}
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                                class="h-4 w-4 {{#if (lte this 4)}}text-yellow-400{{else}}text-gray-200{{/if}}">
                                <path fill-rule="evenodd"
                                    d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                                    clip-rule="evenodd" />
                            </svg>
                            {{/each}}
                            <p class="text-sm text-gray-400">(150)</p>
                        </div>
                        <div>
                            <button class="my-5 h-10 w-full bg-violet-900 text-white">Add to cart</button>
                        </div>
                    </div>`;
                productContainer.insertAdjacentHTML("beforeend", productHTML);
            });
        };

        // Call the function to generate filter options
        generateFilterOptions();
        const urlParams = new URLSearchParams(window.location.search);

        if (!urlParams.has('q')) {
            applyFilters(1); // Apply filters with default sorting
            paginationSearch.style.display = "none";
        } else {
            paginationSearch.classList.add("flex", "justify-center");
            paginationSearch.style.display = "block";
        }
    });
</script>

<script>
    // Function to display products
    function displayProducts(products) {
        const productContainer = document.getElementById('product-list');
        productContainer.innerHTML = '';

        products.forEach(product => {
            const productElement = document.createElement('div');
            productElement.className = 'bg-white rounded-lg shadow-2xl p-4 text-center';
            productElement.onclick = () => window.location.href = `/detail/${formatName(product.name)}`;

            productElement.innerHTML = `
            <img class="product-card mx-auto my-6 object-cover cursor-pointer" src="${product.imageUrl}" alt="${product.name}" >
            <h2 class="text-xl text-[#8c7a6b] m-3 cursor-pointer">${product.name}</h2>
            <p class="text-xl text-[#BD8256] mb-4 cursor-pointer">£${product.price}</p>
            <button class="bg-[#AC6F53] text-white py-3 px-16 rounded-3xl hover:bg-[#7a6c5b]">ADD TO CART</button>
        `;

            productContainer.appendChild(productElement);
        });
    }

    function formatName(name) {
        return name.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', async (event) => {
                const productId = parseInt(event.target.dataset.productId, 10); // Convert to integer
                const quantity = 1; // Default quantity

                try {
                    const response = await fetch('/cart/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId, quantity }),
                    });

                    if (response.ok) {
                        alert('Product added to cart!');
                    } else {
                        alert('Failed to add product to cart. Please try again.');
                    }
                } catch (error) {
                    console.error('Error adding product to cart:', error);
                    alert('Something went wrong. Please try again later.');
                }
            });
        });
    });

    document.getElementById('form').addEventListener('submit', handleFormSubmit);
    document.getElementById('search-form').addEventListener('submit', handleFormSubmit);


    async function handleFormSubmit(event) {
        event.preventDefault();

        // Collect selected filters
        const selectedFilters = {};
        document.querySelectorAll('.filter:checked').forEach(input => {
            const filterType = input.dataset.filter;
            const value = input.dataset.value;
            if (!selectedFilters[filterType]) {
                selectedFilters[filterType] = [];
            }
            selectedFilters[filterType].push(value);
        });

        //console.log('Selected Filters:', selectedFilters);
        const searchQuery = document.getElementById('search-input').value || '';
        const excludeProductId = null; // Set this if you need to exclude a specific product
        const limit = 10; // Set the limit as needed

        try {
            const response = await fetch(`/product/search-filter?q=${encodeURIComponent(searchQuery)}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ filters: selectedFilters, excludeProductId, limit }),
            });

            if (response.ok) {
                const products = await response.json();
                displayProducts(products);
            } else {
                console.error('Failed to fetch products');
            }
        } catch (error) {
            console.error('Error fetching products:', error);
        }
    };
</script>