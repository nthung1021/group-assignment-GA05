<section class="container mx-auto flex-grow max-w-[1200px] border-b py-5 lg:flex lg:flex-row lg:py-10">
    <!-- sidebar  -->
    <section class="hidden w-[300px] flex-shrink-0 px-4 lg:block">
        <div class="flex border-b pb-5">
            <div class="w-full">
                <p class="mb-3 font-medium">FILTERS</p>
                <div id="filter-container"></div>
            </div>
        </div>
    </section>
    <!-- /sidebar  -->

    <div>
        <div class="mb-5 flex items-center justify-between px-5">
            <div class="flex gap-3">
                <button class="flex items-center justify-center border px-6 py-2">
                    Sort by
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="mx-2 h-4 w-4">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                    </svg>
                </button>
            </div>
        </div>

        <section class="mx-auto grid max-w-[1200px] grid-cols-2 gap-3 px-5 pb-10 lg:grid-cols-3">

            <!-- Products -->
            {{#each products}}
            <div class="flex flex-col">
                <div class="relative flex">
                    <img class="" src="{{this.imageUrl}}" alt="{{this.name}}" />
                    <div
                        class="absolute flex h-full w-full items-center justify-center gap-3 opacity-0 duration-150 hover:opacity-100">
                        <a href="/detail/{{formatName this.name}}"
                            class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="h-4 w-4">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                            </svg>
                        </a>
                        <span class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                                class="h-4 w-4">
                                <path
                                    d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
                            </svg>
                        </span>
                    </div>

                    {{#if this.discount}}
                    <div class="absolute right-1 mt-3 flex items-center justify-center bg-amber-400">
                        <p class="px-2 py-2 text-sm">&minus; {{this.discount}}&percnt; OFF</p>
                    </div>
                    {{/if}}
                </div>

                <div>
                    <p class="mt-2">{{this.name}}</p>
                    {{#if this.discountedPrice}}
                    <p class="font-medium text-violet-900">
                        {{this.discountedPrice}}VND
                        <span class="text-sm text-gray-500 line-through">{{this.price}}VND</span>
                    </p>
                    {{else}}
                    <p class="font-medium text-violet-900">
                        {{this.price}}VND
                    </p>
                    {{/if}}
                </div>

                {{!-- <div class="flex items-center">
                    {{#each (range 1 5)}}
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                        class="h-4 w-4 {{#if (lte this ../this.rating)}}text-yellow-400{{else}}text-gray-200{{/if}}">
                        <path fill-rule="evenodd"
                            d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                            clip-rule="evenodd" />
                    </svg>
                    {{/each}}
                    <p class="text-sm text-gray-400">({{this.reviewCount}})</p>
                </div> --}}

                <div>
                    <button class="my-5 h-10 w-full bg-violet-900 text-white">
                        Add to cart
                    </button>
                </div>
            </div>
            {{/each}}
            <!-- /Products -->
        </section>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const menuData = {
            "Brand": ["Apple", "Samsung", "Oppo", "Xiaomi", "Nubia"],
            "Chipset": ["Snapdragon", "MediaTek Dimensity", "Apple", "Unisoc"],
            "OS": ["Android", "iOS", "Xiaomi HyperOS", "ColorOS", "One UI"],
            "RAM": ["4GB", "6GB", "8GB", "12GB", "16GB"],
            "Storage": ["64GB", "128GB", "256GB", "512GB", "1024GB"],
            "Refresh rate": ["60Hz", "90Hz", "120Hz", "144Hz"],
        };

        // Function to generate filter options
        const generateFilterOptions = () => {
            const filterContainer = document.getElementById("filter-container");
            if (!filterContainer) {
                console.error("Filter container element not found.");
                return;
            }

            // Clear existing content
            filterContainer.innerHTML = "";

            // Generate filter options based on menuData
            Object.keys(menuData).forEach(category => {
                const categoryDiv = document.createElement("div");
                categoryDiv.classList.add("mb-4");

                const categoryTitle = document.createElement("p");
                categoryTitle.classList.add("font-medium", "mb-2");
                categoryTitle.textContent = category;
                categoryDiv.appendChild(categoryTitle);

                menuData[category].forEach(item => {
                    const checkbox = `
                    <div class="flex justify-between items-center mb-1">
                        <label class="flex items-center">
                            <input type="checkbox" name="${category}" value="${item}" style="margin-right: 0.5rem;" />
                            ${item}
                        </label>
                    </div>`;
                    categoryDiv.insertAdjacentHTML("beforeend", checkbox);
                });

                filterContainer.appendChild(categoryDiv);
            });

            // Bind events for new checkboxes
            document.querySelectorAll("#filter-container input[type='checkbox']").forEach((checkbox) => {
                checkbox.addEventListener("change", applyFilters);
            });
        };

        const applyFilters = async () => {
            const selectedFilters = {};

            document.querySelectorAll("#filter-container input[type='checkbox']:checked").forEach((checkbox) => {
                const category = checkbox.name.toLowerCase(); // lấy tên bộ lọc (vd: Brand, RAM)
                const value = checkbox.value;  // lấy giá trị được chọn

                // Tạo array cho mỗi category nếu chưa có
                if (!selectedFilters[category]) {
                    selectedFilters[category] = [];
                }

                // Thêm giá trị đã chọn vào array
                selectedFilters[category].push(value);
            });

            const query = Object.keys(selectedFilters)
                .map((key) => selectedFilters[key].map((value) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&"))
                .join("&");

            try {
                console.log("Query:", query);

                const response = await fetch(`/product/filter?${query}`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                if (!response.ok) {
                    console.error("Error fetching data:", response.statusText);
                    return;
                }

                const data = await response.json();
                console.log("Filtered products:", data);

                if (data.success) {
                    updateProductList(data.products); // Cập nhật UI với danh sách sản phẩm lọc được
                } else {
                    console.error("Error fetching products:", data.message);
                }
            } catch (error) {
                console.error("Error fetching filtered products:", error);
            }
        };

        const updateProductList = (products) => {
            const productContainer = document.querySelector("section.grid"); // Chọn container hiển thị sản phẩm
            if (!productContainer) {
                console.error("Product container not found.");
                return;
            }

            // Xóa sản phẩm cũ
            productContainer.innerHTML = "";

            // Thêm sản phẩm mới
            products.forEach((product) => {
                const productHTML = `
                    <div class="flex flex-col">
                        <div class="relative flex">
                            <img src="${product.imageUrl}" alt="${product.name}" />
                            <div class="absolute flex h-full w-full items-center justify-center gap-3 opacity-0 duration-150 hover:opacity-100">
                                <a href="/detail/${product.lowercaseName}"
                                    class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                        stroke="currentColor" class="h-4 w-4">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                                    </svg>
                                </a>
                                <span class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                                        class="h-4 w-4">
                                        <path
                                            d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
                                    </svg>
                                </span>
                            </div>
                            ${product.promotion ? `<div class="absolute right-1 mt-3 flex items-center justify-center bg-amber-400"><p class="px-2 py-2 text-sm">&minus; ${product.promotion}% OFF</p></div>` : ''}
                        </div>
                        <div>
                            <p class="mt-2">${product.name}</p>
                            ${product.discountedPrice
                        ? `<p class="font-medium text-violet-900">${product.discountedPrice} VND <span class="text-sm text-gray-500 line-through">${product.price} VND</span></p>`
                        : `<p class="font-medium text-violet-900">${product.price} VND</p>`}
                        </div>
                        {{!-- <div class="flex items-center">
                            ${Array.from({ length: 5 }, (_, i) => i < product.rating
                            ? '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-yellow-400"><path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" /></svg>'
                            : '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-gray-200"><path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" /></svg>'
                        ).join('')}
                            <p class="text-sm text-gray-400">(${product.reviewCount})</p>
                        </div> --}}
                        <div>
                            <button class="my-5 h-10 w-full bg-violet-900 text-white">Add to cart</button>
                        </div>
                    </div>`;
                productContainer.insertAdjacentHTML("beforeend", productHTML);
            });
        };
        // Call the function to generate filter options
        generateFilterOptions();
    });
</script>

{{!-- <div class="hidden gap-3 lg:flex">
    <button class="border bg-amber-400 py-2 px-2">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
            class="h-5 w-5">
            <path stroke-linecap="round" stroke-linejoin="round"
                d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z" />
        </svg>
    </button>

    <button class="border py-2 px-2">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
            class="h-5 w-5">
            <path stroke-linecap="round" stroke-linejoin="round"
                d="M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm-.375 5.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
        </svg>
    </button>
</div> --}}

{{!-- <div class="flex flex-col">
    <div class="relative flex">
        <img class="" src="{{this.imageUrl}}" alt="{{this.name}}" />
        <div
            class="absolute flex h-full w-full items-center justify-center gap-3 opacity-0 duration-150 hover:opacity-100">
            <a href="/detail/{{formatName this.name}}"
                class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="h-4 w-4">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                </svg>
            </a>
            <span class="flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-amber-400">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4">
                    <path
                        d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z" />
                </svg>
            </span>
        </div>

        {{#if this.discount}}
        <div class="absolute right-1 mt-3 flex items-center justify-center bg-amber-400">
            <p class="px-2 py-2 text-sm">&minus; {{this.discount}}&percnt; OFF</p>
        </div>
        {{/if}}
    </div>

    <div>
        <p class="mt-2">{{this.name}}</p>
        {{#if this.discountedPrice}}
        <p class="font-medium text-violet-900">
            {{this.discountedPrice}}VND
            <span class="text-sm text-gray-500 line-through">{{this.price}}VND</span>
        </p>
        {{else}}
        <p class="font-medium text-violet-900">
            {{this.price}}VND
        </p>
        {{/if}}
    </div>

    <div class="flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-yellow-400">
            <path fill-rule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clip-rule="evenodd" />
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-yellow-400">
            <path fill-rule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clip-rule="evenodd" />
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-yellow-400">
            <path fill-rule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clip-rule="evenodd" />
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-yellow-400">
            <path fill-rule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clip-rule="evenodd" />
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-gray-200">
            <path fill-rule="evenodd"
                d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                clip-rule="evenodd" />
        </svg>
        <p class="text-sm text-gray-400">(38)</p>
    </div>

    <div>
        <button class="my-5 h-10 w-full bg-violet-900 text-white">
            Add to cart
        </button>
    </div>
</div> --}}

{{!-- // Generate filter options on page load
//generateFilterOptions();

// Existing code for menu interaction
document.querySelectorAll(".menu-item").forEach((item) => {
item.addEventListener("click", (event) => {
const category = event.target.getAttribute("data-category");
const content = menuData[category] || [];
const menuContent = document.getElementById("menu-content");

// Clear existing highlight
document.querySelectorAll(".menu-item").forEach((el) => {
el.classList.remove("bg-amber-400");
el.classList.add("hover:bg-neutral-100");
});

// Add highlight to clicked category
event.currentTarget.classList.add("bg-amber-400");
event.currentTarget.classList.remove("hover:bg-neutral-100");

// Update content
if (menuContent) {
// Clear existing content
menuContent.innerHTML = "<div class='flex gap-20'></div>";

const container = menuContent.querySelector("div");

// Calculate the number of columns
const numColumns = Math.ceil(content.length / 3);

// Create columns and distribute items
for (let i = 0; i < numColumns; i++) { const ul=document.createElement("ul"); ul.classList.add("text-sm", "leading-8" );
    // Get items for the current column const columnItems=content.slice(i * 3, i * 3 + 3); columnItems.forEach((item)=>
    {
    const li = document.createElement("li");
    li.textContent = item;
    ul.appendChild(li);
    });

    container.appendChild(ul);
    }
    } else {
    console.error("Menu content element not found.");
    }
    });
    }); --}}