generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String
  password  String?
  phone     String?
  createdAt DateTime @default(now())
  status    Boolean  @default(true)
  role      String   @default("user")
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  googleId   String?
  avatar    String?  @default("/img/default-avatar.png")
  Order     Order[]
  Review   Review[]
}

model Product {
  id                      Int    @id @default(autoincrement())
  name                    String @unique
  brand                   String
  price                   Int
  chipset                 String 
  os                      String
  ram                     Int
  disk                    Int
  screenSize              Float
  refreshRate             Int
  isFeatured              Boolean
  imageUrl                String
  shortDescription        String
  longDescription         String
  promotion               Float
  number                  Int
  lowercaseName           String @unique 
  release_time            DateTime 
  Cart                    Cart[]
  orderProducts           OrderProduct[]
  Review                  Review[]
  images                  String[]
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      Json
  expire    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int? // Nullable for guest users
  sessionId String? // Used for guest users
  productId Int
  quantity  Int     @default(1)
  Product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id             Int            @id @default(autoincrement())
  userId         Int? // For registered users
  sessionId      String? // For guest users
  user           User?          @relation(fields: [userId], references: [id])
  orderProducts  OrderProduct[]
  deliveryMethod String
  paymentMethod  String
  totalAmount    Float
  shippingFee    Float
  address        String
  email          String
  comment        String?
  cardNumber     String
  cardHolder     String
  cardExpire     String
  cardCVV        String
  orderStatus    String         @default("Pending")
  createdAt      DateTime       @default(now())
}

model OrderProduct {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Ensure unique combinations of orders and products
}

model Review {
  id          Int       @id   @default(autoincrement())
  username    String
  id_product  Int
  review      String 
  created_at   DateTime  @default(now())

  product     Product   @relation(fields: [id_product], references: [id])
  user        User      @relation(fields: [username], references: [username])
}
